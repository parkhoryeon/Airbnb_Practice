# 가상환경 
  python -m venv [가상환경 이름]
  [가상환경 이름]/Scripts/activate - 활성화
  deactivate - 비활성화

# 장고설치
  pip install django

# 장고 프로젝트 생성
  django-admin startproject config . (해당 위치에 manage.py 설정)

# 장고 슈퍼계정 생성
  python manage.py createsuperuser

# 장고 DB 마이그레이션
  python manage.py makemigrations
  python manage.py migrate

# 장고 App 생성
  python manage.py startapp [앱이름]

# 앱을 생성하면 settings.py 에 INSTALLED_APPS 에 추가해줘야 한다.

# INSTALLED_APPS = SYSTEM_APPS + THIRD_PARTY_APPS + CUSTOM_APPS
  3가지로 나누어서 관리하면 구분하기 쉽다.

# TEMPLATES와 STATIC 설정

# 장고 기본 User모델이 아닌 커스텀 User 모델을 만드려면
  from django.contrib.auth.models import AbstractUser
  모델 Class에 AbstractUser를 상속 받아야 한다.

# 추가로 settings.py에 
    # Custom User
    AUTH_USER_MODEL = 'users.User' 추가해줘야 한다.

# admin.py에 모델을 등록하는 방법
    @admin.register(models.User)
    class CustomUserAdmin(UserAdmin):
        pass

# 장고 기본 관리자페이지의 사용자어드민 기능을 가져오려면
  UserAdmin을 상속 받아서 사용한다.
  from django.contrib.auth.admin import UserAdmin

# requirements.txt 는 해당 프로젝트를 위해 필요한 것들을 작성한다.
  나중에 pip install -r requirements.txt 로 한 번에 설치가 가능하다.

# gitHub / Git 을 통한 소스관리를 한다면 .gitignore 에 소스를 업로드 하지 않을것들을
  추가하여 관리한다.

# 우린 Class들을 가지고 있고, 그 Class들을 print 하려고 하면 못생겼어.
  우리가 원한다면 저 Class 들이 어떤 식으로 생길지 설정할 수 있어.

# blank = True 는 from에서 필드가 필수적이지 않게 해준다.

# null = True 는 데이터베이스에서 필드가 null 값을 가질 수 있게해준다. 

# Many to One / One to Many : 이 둘은 거의 비슷한데 어느 것에서부터 보느냐에 따라 다르다.
  [Room1, Room2, Room3] => User1
  User1 => [Room1, Room2, Room3]
  
# Many to Many
  [Amenity1, Amenity2, Amenity3] => [Room1, Room2, Room3]
  하나의 room은 하나의 owner만 가질 수 있었는데, 이 경우에는
  하나의 room이 여러 amenity를 가질 수 있다.  
  그리고 여러 amenity 들이 여러 room에서 사용할 수 있다.

# One to One
  한쪽의 하나와 다른쪽의 하나가 연결이 되어있다면 다른것은 연결할 수 없다는 의미.

# auto_now : Object가 저장될 때마다 해당 필드를 현재 date로 설정.

# auto_now_add : Django에 의해 처음 생성되었을 때 채워질 것이다. 

# 파이썬에는 dir() 이라는 내장 함수가 있는데, 어떤 객체를 인자로 넣어주면 해당 객체가 어떤 변수와 메소드를 가지고 있는지 나열해준다.

# 가장 최악의 방법
  from django.http import JsonResponse
  from django.core import serializers
  from django.shortcuts import render
  from .models import Category

  def categories(request):
      all_categories = Category.objects.all()
      return JsonResponse({ 
          "ok": True,
          "categories": serializers.serialize("json", all_categories),   
      })
  장고의 serialization 프레임워크는 우리에게 커스마이징을 위한 많은 기능을 제공하지 않는다.
  그래서 Django REST 프레임워크를 사용할 것이다.

# Django REST framework 엄청나게 강력한 패키지라서 우리의 시간을 많이 절약할 수 있다.
  많은 숏컷을 제공해줘서, REST API를 단시간에 만들 수 있게 해줄것이다.
  Django REST framework는 나온지 오래되었으며, 이미 산업계의 표준이다.

# django rest framework 설치
  pip install djangorestframework
  settings.py에 INSTALLED_APPS에 'rest_framework' 추가한다.

# 새 room을 만드려면 인증이 되어야 한다. 그리고 내가 host 이어야 한다.
  새로운 room을 만들 때 그 room이 어떤 카티고리인지도 알려줘야 한다.
  어떤 amenity를 가지고 있는지도 알려줘야 한다.
  그래서 우리는 serializer 간에 관계(relationship)을 어떻게 만드는지 배워야 한다.
  model 간에 관계를 만든 것처럼 말이야.

# 너가 room을 수정하고 싶을 경우, amenity를 하나 더 추가하거나 카테고리를 바꾸는 것처럼 room을 수정하고 싶을 때
  우리는 이렇게 관계가 있는 걸 어떻게 수정해야하는지 배워야 한다.
  당연히 주인이 아니면 room을 지우지 못하게 해야하기 때문에, 확인을 해야한다.

# serializer.py에서 클래스안의 Meta 안에다가 depth = 1 을 하게되면 관계가 확장이된다.
  예를 들어서 owner의 경우에는 확장되서 기존에는 owner의 id만 json으로 확인할 수 있었는데
  확장이 되면서 owner의 모든 정보를 확인할 수 있다.

# 하지만 문제점은, 대부분의 상황에서는 한 번에 이런 모든 데이터가 필요하지 않다는 것이다.
  우리는 불필요한 정보를 보여주지 않고, 요청하는 데이터의 양에 대해 주의를 해야한다.  
  내가 만들 UI에 따라서 달라진다.

# dept = 1 의 문제점은 커스터마이즈할 수 없다는 것이다. 아무것도 설정할 수 없다.  

# 그래서, 너만의 seralizer를 만들 수 있는 방법을 알려줄게
  serializer를 확장하고 싶은데 모든 걸 다 보여주고 싶지 않을 때를 위해서 말이야.

# 우리는 room을 나열할 때 사용하는 작은 seralizer를 만들 거고
  room 하나만 볼 때 사용하는 큰 serializer를 만들거다.
  그리고 어떻게 우리만의 관계성 serializer를 만들고 설정하는 배워볼 것이다.    

# DetailSerializer의 경우에는 확장이 되어있는 상태이고 연결된 모델들에 대해서도
  입력을 해줘야 생성이 가능하다.
  방의 정보에서 owner 를 read_only=True 로 설정을 하게되면 에러가 발생한다.
  owner의 정보가 null 이 되면 않되기 때문이다.
  이런 경우에는. save()를 호출할 때. request.user의 정보를 같이 넘겨주게 되면
  serializer의 def create()를 호출하게 되고 그 안에 validated_data에 자동으로 추가가 되게 된다.
  추가하는 건 무엇이든지 너의 create 메서드에 validated_dat에 추가가 될것이다.
  - user가 비어있는 에러를 해결 관련 설명

# 근데 추가적인 문제는 우리가 amenities, categories 없이 방을 생성하고 있다는 점이다.
  만약 내가 이런걸 보낼 수 있다면?
  "category": 2,
  "amenities": [1, 2, 3],
  그냥 amenities의 id들만 보내준다면 내 create 메서드가 이 id를 가진 amenity 들을
  찾아서 방과 연결시켜주는 거지

# category 와 amenity 를 serializer에서 'read_only = True'를 하였기 때문에
  validation은 없어진 셈이다. 내가 직접 validation을 진행을 해야한다.

# ParseError 에는 에러의 원인을 입력할 수 있다.

# 모든 코드가 성공하거나 아무 것도 성공하지 않기를 원할때 트랜잭션을 사용해야 한다.
  생성했다가 에러가 나서 지우는것은 ID를 낭비하게 되기 때문에 좋지 않다.

# 장고에서는 기본적으로 모든 쿼리는 즉시 데이터베이스에 적용된다.

# from django.db import transaction
  트랜잭션에서 try-except를 사용한다면 transaction은 에러가 난 사시을 알지 못한다. 제거해줘야 한다.

# if + if 와 if + elif 의 차이점
  if + if : 두 개다 실행
  if + elif : if 에서 만족하면 elif에서 실행되지 않음.

# 가끔은, 유저가 요청한 데이터를 계산해서 필드로 만들어야 할 때가 있을거야
  그리고 가끔은 누가 보느냐에 따라 값이 달라지는 필드를 만들어야 할 때도 있을거야.
  지금 하고 싶은 건, 내 serializer에 추가적인 필들를 넣는 거야.
  내 room의 평균 리뷰가 몇인지 알려주는 필드 말이야.

# 네가 만든 function을 호출해서 그 결과를 serializer fiel에 넣는 법을 가르쳐줄게.
  먼저 우리의 코드를 실행하고 그 결과를 field에 입력하고
  그러고 나서 Room 모델의 rating 메서드를 부르고 field에 넣어줄거야.

# 어떻게 하냐면, 일단 필드를 만드는거야. 이름은 뭐라해도 상관없어.
  serializer에 필드를 추가.
  potato = serializers.SerializerMethodField()
  이건 Django REST framewrok에게 뭘 말하냐면
  네가 potato의 값을 계산할 method를 만들 거라고 하는거야.
  그리고 이 부부은 이름이 특정한 모양을 가져야해서 아주 중요하다.
  def get_potato(self, another): --> 이름은 이 같은 형식을 가져야 한다. 'get_이름'
  메서드 이름은, 속성의 이름 앞에 get_을 붙여야 한다.

# another를 출력을 해보면, 그 메서드를 현재 serializing하고 있는 오브젝트와
  함께 호출이 된다.
  potato.메서드() 로 사용.
  "__all__" 이 아닌 fields 로 되어있다면, 해당 potato를 추가해줘야 한다.

# 방을 보고 있는 유저에 따라 필드를 계산하는 방법에 대해 배워보자.

# serializer를 생성할 때, 원한다면 너는 거기에 약간의 context를 줄 수 있어.
  이 context는, 너가 serializer에 외부 세계에 대한 정보를 보내야 할 때 매우 유용할 것이다.
  예를 들면, 내가 지금 하고 싶은 것은, 방 세부정보에서의 get 메소드에서 말야.

# 나는 serializer에서 context 키워드 인자를 사용하고 싶어.
  serializer = RoomDetailSerializer(room, context={})
  내가 원하는 뭐든지 시리얼라이저에 전달할 수 있어.
  그러면, 네가 원하는 메소드 어떤 것이든 시리얼라이저의 context에 접근할 수 있다는 거야.
  물론 그 serializer 안에 있다면 말이지

  예를 들어 네가 save 메소드를 만든다면 혹은 update 메소드를 만든다면 말야. 어떤 것이든.. 혹은 create 메소드도.

  혹은 심지어 get_rating도 가능해.(커스텀 메소드)

# 이 context에 접근하려면, 여기서 self.context라고 적어주면 된다.

# serializer의 역접근자의 경우에는 네가 사용할 serializer를 적어주고 변수는 related_name을 설정한 이름이거나 
  설정하지 않았을 경우에는 이름_set을 해준다.

# 하지만 방에서 역접근자를 사용하여 리뷰를 보여주는 경우 위험에 처하게 될 수 있다.
  방 하나는 수만 개의 리뷰를 가질 수 있기 때문이다. 
  그래서 너의 방을 보여줄 때, 역접근자를 포함하는 건 좋은 생각이 아니다.
  완전 잘못되어 버릴 수도 있거든.

# 역 접근자를 위해선 일종의 pagination이 있어야 할거야.
  우린 여전히, 특정한 방에 달린 리뷰들을 보고 싶지만 한번에 모든 리뷰들을 로드하고 싶진 않겠지 

# 그래서 다음 영상에서 ID가 1인 방 만의 리뷰를 보기 위한 새로운 URL을 만들거야.

# rooms/views.RoomReviews 
  오직 방 리뷰만 가지고 있어. 우린 단지 방 리뷰만 로딩하고 있다고.
  이전에 한 방법보다 더 나은 방법이야.
  왜냐면 이전에는 우리가 리뷰들을 로딩했지만 유저들은 그 지점까지 스크롤을 내리지 않을 수도 있거든
  이제 할 수 있는건, 방의 페이지를 만들고, 유저가 아래로 스크롤하면 그 때 리뷰를 요청할 수 있게 하는것이다.
  유저가 리뷰를 보고 싶어하는 게 확실하다면 말이지.
  하지만 아직은 페이지 네이션을 하지 않고 있다. 

# 그러면 페이지네이션을 어떻게 처리하면 되는걸까?
  좋은 소식은 장고는 너무 멋져서, 페이지네이션이 포함되어 있다는 거야.

# 첫 번째 단계는 물론, 여기에 있는 페이지 인자를 가져오는 거야
  URL에 있는 페이지 인자 말이야.
  request.query_params 로 가져올 수 있다 쿼리를
  request.query_params.get('page')
  모든 딕셔너리의 get 메소드는 기본값을 지정할 수 있게 해준다.
  page = request.query_params.get("page", 1) page를 찾을 수 없는 경우에 콤마를 사용에 1을 쓰는 것이다.
  URL에서 쿼리를 가져오게 되면 str 이기 때문에 int()로 변경해 줘야 한다.
  page_size를 설정해준다. 한 페이지에 나타날 수.
  start = (page-1) * page_size
  end = start + page_size
  room.review_set.all()[start:end],

# ImageField의 경우에는 장고에게 파일이 저장된 위치를 알려줘야 한다.
  근데 우리 서버의 파일 시스템을 가보면, 우리가 업로드한 파일이 여기에 있는 걸 볼 수 있다.
  사진이 업로드되는 위치를 변경하려면, config 폴더의 settings.py 에 MEDIA_ROOT = "uploads" 
  조심해 '/'를 적을 필요없어. 그냥 폴더 이름만 작성한다.

# 두 번째는, 어떻게 유저에게 이러한 파일들을 노출시킬 것인지에 관한 것이다.
  우린 어떤 url에서 유저에게 이 파일을 노출시키고 싶을까? 
  이걸 위해 우린 MEDIA_URL을 정의해야 한다. 너가 원하는 이름으로 해줄 수 있다.(settings.py 에 추가)
  그리고 MEDIA_URL은 반드시 '/'로 끝나야 한다. 
  명심해. 이건 단지 url을 위한 거야. 하지만 그럼에도 Not found(404)가 나오는데
  장고에게 이 user-uploads를 노출시켜 달라고 말해줘야 한다.

# settings.py에 있는 url을 복사-붙여넣기 대신에, settings의 MEDIA_URL 변수를 import 할 수 있다.
   
# 그러기 위해서 settings.py 를 임포트 하여야 하는데, 직접할 수도 있지만 그 대신,
  장고는 from django.conf import settings라는걸 지원해준다.
  이건 너의 settings.py에 대한 프록시인데 너무 너무 쿨하지.  
  왜냐면, 넌 django를 위한 settings 뿐만 아니라 너만의 settings를 위해서 settings.py를 쓸 수 있다.
  예를 들어 저기에 API 토큰을 둔다든지, 기타 설정 사항들을 추가할 수 있지.
  하지만 방금 한 것은 개발 환경에서만 권장이 된다.
  + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) 

# 유저가 올리는 파일을 네 코드 옆에 두도록 해서는 안된다.
  네가 모르는 사람들이 올리는 파일에 서버 디스크 공간을 할애하고 싶지 않을 거야.
  그건 신뢰할 수 없는 유저 입력이야. 넌 그들이 뭘 업로드할지 알 수 없어. 좋은 생각이 아니야.
  대신 나중에 우리가 할 일은 이 파일들을 다른 서버에 넣는거야.
  장고는 오직 파일의 url에 대해서만 알게 될 거거든.그것만.
  그래서 파일이 장고에 접촉할 일은 없을 거야.
  장고는 오직 파일의 url만 알게 되고, 우리의 영상과 사진 파일을 우리 서버에 두진 않을 거야.
  AWS 서버 또는 클라우드 이미지 서버로 이동시킬 거야.
  그들은 파일 처리, 파일 업로드, 파일 다운로드에 특화된 서버들이거든.
  그들은 캐싱을 매우 잘 할 수 있구, 커스텀 할 수도 있어
  파일의 보안도 되고, 그런 것들에 특화되어 있지
  앞으로 우리는 파일 다루는 데 장고를 사용하지 않을 거야.

# 이러한 이유로, 장고가 파일이 무엇인지 알기를 원하지 않기 때문에 media 모델을 URL 필드로 수정할 거야.
  내가 말했듯이 파일을 Cloudflare에 업로드하면 파일의 URL을 줄 거고, 우린 그걸 장고에게 제공할거야.
  데이터베이스에는 URL만 저장을 할 것이다.
# from rest_framework.permissions import IsAuthenticatedOrReadOnly
  이것은 만약 요청이 GET 요청이라면 누구나 통과할 수 있게 해준다.

# from rest_framework.permissions import IsAuthenticated
  이것은 인증이 되어야만 한다.

# from django.utils import timezone
  now = timezone.now() : 현재 날짜와  시간
  timezone.localtime(now)
  timezone.localtime(now).date()

# 어떤 사람은 data를 보여주기 위한 serializer랑 data 생성용으로 쓰이는 또 다른 serializer를 만들기도 한다. 

# seriallizer의 특정 필드를 커스텀 하기 위해서는?
  보통의 serializer는 필수값인지를 확인해주고 올바른 형식으로 데이터가 들어왔는지 까지만 확인을 해준다.
  그래서 예를 들어서 check_in 이라는 필드가 있는데 이게 지금 날짜로부터 항상 미래의 날짜만 들어와야 한다면
  이전에서는 view에서 따로 validation 을 작성을 해줬었는데 이것을 serializer에서 검증을하고 is_valid()에서 False를 반환하게 할 수 있다.

  방법은 serializer에 다음과 같은 method를 만드는 거다.
  'validate_[field 이름]  -  def validate_check_in(self, value):

# 위에는 특정 필드의 validation을 진행을 하는 것이고 모든 데이터를 검증하는것은
  def validate(self, data): 
  위와 같은 방법으로 할 수 있다.

# user의 password 나 인증 부분을 다룰 건데 Django는 이런 부분들을 무료로 제공해주고 있다. 

# Django rest framework와 model serializer를 사용하는게 좋은 건 ModelSerializer가 uniqueness를 체크 해준다는 것이다.

# ### 코드 챌린지 ###
  좀 더 큰 규모의 public user serializer를 만들어 보는 건 어떨까>?
  사람들이 내 프로필에서 내 리뷰를 볼 수 있게 한다던지
  내가 얼마나 집을 가지고 있는지
  내가 어떤 도시들을 여행했는지
  아니면 나에 대한 리뷰를 볼 수 있도록  

# set_password() / check_password (True / False 반환)

# 이제부터는 django에서 제공되는 2가지 섹시한 function을 사용할 건데
  from django.contrib.auth에서 authenticate, login 을 import 할 것이다.

# authenticate 는 username과 password를 돌려주는 function인데
  만약 username 과 password가 맞으면, django는 user를 리턴할 것이다.

# login은 유저를 로그인시켜주는 function 이다.
  로그인 시켜줄 user와 request를 보내면 django가 브라우저가 필요한 쿠키와 token, 중요한건 다
  자동으로 만들어 준다.

#### 코드챌린지 Experiences

GET POST /experiences
GET PUT DELETE /experiences/1
GET /experiences/1/perks
GET POST /perks [X]
GET PUT DELETE /perks/1 [X]
GET POST /experiences/1/bookings
GET PUT DELETE /experiences/1/bookings/2



# Django REST framework에서 authentication strategy를 구축하는 법에 대해 배워볼 것이다.
  그 다음 토큰 베이스의 인증을 생성해보고, 그 다음 JWST(Json Web Token) 인증을 만들거야.
  각각은 서로 달라. 각자 장점이 있어.
  이번 세션의 목표는, 여러분이 어떤 인증 방식을 원하든 django rest framework에서 구현하는 법을 알려주는 거야.

# django는 너무 좋아. 우리가 바로 사용할 수 있는 인증시스템이 기본으로 붙어있다.
  시스템은 세션 베이스야. 로그인하면 django는 백엔드에서 세션을 생성하고 자동으로 쿠키도 줄 거야.
  매번 django 웹사이트를 방문할 때 마다, 쿠키는 django로 갈 것이고
  django 는 쿠키를 읽어서 request.user에 user와 쿠키 정보를 함께 넣을것이다.

# Postman은 브라우저 밖에서 API와 상호작용할때 쓰는거야. postman 설치

# 우리만의 인증 로직을 만들어 볼거야. JWT 나 토큰이 아니야
  제일 멍청한 인증방식이지만, 스스로 정한 요구사항에 맞춰서 user를 인증하는 방법을 볼 수 있다.
  settings.py에 django rest framework 인증의 default 방식을 명시해줄 것이다.
  rest framework 인증 방식을 변경하려면, 
  DEFAULT_AUTHENTICATION_CLASSES 라는 걸 변경해야 한다.
  그 설정을 하려면 REST_FRAMEWORK를 변경해야 한다.  
  # 우리만의 인증 로직(JWT X, TOKEN X)
  REST_FRAMEWORK = {
      'DEFAULT_AUTHENTICATION_CLASSES': [
          'rest_framework.authentication.SessionAuthentication',
      ]
  }

# config 폴더에 permissions.py 라는 새 파일을 생성해.
  거기에 우리만의 Authentication class를 만들거야.
  Authentication class는 무엇이든 될 수 있어. 마지막에 user만 반환해주면 된다.
  Authentication class가 반환하는 user가 views에서 받게되는 user야
  Authentication class는 views.py보다 먼저 실행되는거야.
  Authentication class가 먼저 실행되고, user를 찾은 다음,
  거기서 찾아진 user가 모든 views의 request.user로 들어갈거야.


# django rest framework는 user를 인증하는 다양한 방법을 가지고 있다.
  한 가지는 BasicAuthentication인데 별로 추천하지 않아. 아무도 안쓰기도 하고.

# 진짜 우리가 사용해볼 건 TokenAuthentication
  이걸 위해서, token model이 필요하다.
  랜덤한 토큰을 생성해서 user에게 전달할 건데
  그 토큰은 데이터베이스에 저장되어 있어야해
  좋은 소식은 django rest framework엔 이미 token authentication이 있다는거야.

# 자 이제 settings.py에 가서 rest_framework.authtoken을 추가해줄것이다.
  이 코드 한줄을 쓰는것만으로 admin 페이지에서 새로운 모델을 볼 수 있을것이다.
  데이터베이스에 새로운 테이블이 생긴다는 말이지.
  즉 데이터베이스를 migrate 해야한다는 말이지.
  DEFAULT_AUTHENTICATION_CLASSES 에 TokenAuthentication을 추가해줘.
  그러면 장고 관리자페이지에 토큰관련해서 생성이 되는데 거기에서 토큰을 생성하지는 않을거야.
  대신 토큰을 얻을 수 있는 API URL을 하나 만들어야 하는데
  django rest framework는 아주 멋지기 때문에 이미 여기에 필요한 APIView를 가지고 있다.

# from rest_framework.authtoken.views import obtain_auth_token
  path("token-login", obtain_auth_token),
  이 view는 너가 username과 password를 보내면 token을 반환할것이다.

# 처음에 user에게 토큰을 주고 그 토큰은 데이터베이스에 저장된다.
  그러고나면 우리가 TokenAuthentication을 DEFAULT_AUTHENTICATION_CLASSES 에 추가했기 때문에
  REST framework는 request에서 토큰을 찾아서 user가 누군지 알려줄것이다. 

# 토큰을 보내는 규칙이 있는데, headers의 Authorization안에 토큰을 넣어야 한다.
  KEY: Authorization, VALUE: 'Token '이라고 적고, 그 다음 토큰을 붙여넣는거야.
  이게 token authentication을 하는 규칙이야.
  이 인증이 제대로 동작한다면, send 버튼을 눌러 GET request를 보내면
  /users/me로 토큰이 담긴 Authrization 헤더랑 같이 GET request를 하면
  만약 제대로 동작한다면 내 프로필을 볼 수 있어야 한다.

# 토큰을 지우고 다시 요청을 보내면, 토큰이 유효하지 않다고 나온다.

# 이번 영상에서는 JSON Web Token은 구현할것이다.
  JSON Web Token은 데이터베이스에 공간을 전혀 차지하지 않는다.
  JWT는 데이터베이스에 아무것도 저장할 필요가 없어. 
  대신에 암호화된 정보를 담고있는 토큰을 유저에게 줄것이다.
  유저는 그 토큰을 가지고 있다가 다시 줄거야.
  유저가 토큰을 주면, 우린 그 토큰을 열어서 정보를 확인할거야

# 유저가 username과 password를 주면, 토큰을 생성하고 유저에 관한 정보를 토큰안에 넣을거야.
  예를들면 유저 ID 같은거. 유저는 그 토큰을 가지고 있다가 다시 보내올거야.
  그럼 우린 그 토큰을 열어서 우리가 넣었던 정보를 볼거야.

# Auth token은 key와 유저의 관계를 데이터베이스에 저장했었지
  JSON Web Token 에서는 토큰자체에 user에 관한 정보를 넣고 그 토큰을 닫아서 유저에게 주고,
  토큰을 받으면 토큰을 열어서 유저 정보를 찾는거야.
  이 방법의 문제점은 유저를 강제 로그아웃 시킬수가 없다는 거야.

# Auth token의 경우에는, 보이는 것처럼 이 유저가 로그인해서 유효한 토큰을 가지고 있는데
  강제로 로그아웃시키고 싶으면, 그냥 토큰을 지우면 된다.

# JSON Web Token은 이런 기능이 기본적으로 제공되지 않아. 직접 로직을 짜야한다.

# 만약 강제로그아웃을 하고 싶으면, Auth token이나 기본 세션/쿠키 인증을 사용하는게 좋아.

# 이걸위해 pyJWT라는 라이브러리를 사용할거야.
  pip install pyjwt

# 토큰은 유저에게 전달되기 때문에 민감한 정보를 토큰에 담아서는 안된다.
  유저가 원하면 토큰을 복호화 할 수 있기 때문이야.
  jwt토큰의 보안점은 토큰이 암호화되었다는게 아니야.
  대신 이 토큰이 우리가 준 토큰인지, 수정되었는지 아닌지 알 수 있다는게 특징이야.
  그래서 JWT 토큰안에 넣는 정보가 공개적인 거라면 괜찮아
  왜냐면 유저가 토큰을 살펴볼 수 있거든, 유저가 토큰을 수정할 수는 없지만, 어쨌든 정보는 숨길 수 없어.

# 이제 settings.py로 가보면 django는 SECRET_KEY를 가지고 있어.
  이 SECRET_KEY는 django가 유저에게 제공하는 쿠키나 세션에 서명할때 사용하는 거야
  즉 나중에는 SECRET_KEY를 삭제하고, 프로덕션에서 실행할 때는 새로운 비밀키를 생성해야 한다는 거야.
  소스코드 내부에 있어서는 안돼.!
  하지만 지금은 토큰을 암호화/복호화할때 settings에 있는 SECRET_KEY를 사용할거야.
  token = jwt.encode({"pk": user.pk}, settings.SECRET_KEY, algorithm="HS256",)


# 토큰을 받기위한 authentication class를 작성해볼 것이다.
  토큰을 복호화하고 유저가 누군지 찾아서 모든 view에 전해줄것이다.

# 우리가 사용하는 모든 키, 특히 비밀 키 같은 것들은 모두 숨겨져야 한다.
  이것들은 소스코드에 있어서는 안되는거다.
  그리고 django에게 환경파일을 읽는 방법도 알려줘야 한다.
  .env 라는 파일을 새로 만들어야 한다.
  
# .env파일 읽는걸 도와줄 패키지를 설치하는 거야.
  그 패키지의 이름은 django-environ 이야
  pip install django-environ

# 이제 config 폴더안에 settings.py로 가서 맨위에다가 os랑 environ을 import 한다.
  environ에게 .env 파일을 읽으라고 알려줘야 한다.
  # environ에게 .env파일을 읽으라고 알려준다.
  env = environ.Env()

  # Build paths inside the project like this: BASE_DIR / 'subdir'.
  BASE_DIR = Path(__file__).resolve().parent.parent
  print('⭐ BASE_DIR : ',BASE_DIR)

  environ.Env.read_env(os.path.join(BASE_DIR, '../', '../', '.env'))
  print('⭐😍 : ', os.path.join(BASE_DIR, '../', '../', '.env'))

# SECRET_KEY = env("SECRET_KEY") 이런식으로 사용하면 된다.

# 뭔가 좀더 짧고 다양한 기능이 있는걸 쓰고싶으면,
  django rest framework에 가서 API Guide로 가서 Authentication으로 가져야해서
  그 다음 Third party packages로 가보면
  만약 JSON Web Token이 아닌 더 나은 토큰인증이 필요하면,
  django-rest-knox를 추천할게 이거 정말 괜찮아.
  djagno rest framework에서 제공되는 기본 토큰 인증보다 개선사항이 많아.
  예를들면, django rest framework에서 토큰인증은 암호화되지 않은상태에서 데이터베이스에 저장이 된다.
  그말은 admin panel에 접근 가능한 사람은 누구나 유저 계정을 탈취할 수 있다는 뜻이야.

# 만약에 knox를 쓰면, 토큰은 마치 비밀번호처럼 해쉬형태로 암호화되어서 저장이 된다.
  데이터베이스가 탈취당해도 아무도 토큰까지 탈취할 수는 없어.

# 또 좀 더 나은 JWT Json Web Token 인증을 쓰고싶으면, Simple JWT를 추천할게
  좀더 많은 것들을 커스텀할 수 있게 해줘. 어떤 토큰을 블랙 리스트 지정할 수도 있고
  토큰을 만료시킬수도 있고, 토큰 유효기간을 수정할 수 있게 해준다.

# 우리 코드에서 발생할 수 있는 모든 케이스를 작성해놓고 명령어 하나로 테스트하면 좋을거야.
  django에서는 이게 가능해. python manage.py test라는 좋은 테스트 명령어가 있거든
  이 명령어를 실행시키면, 파이썬은 너가 작성한 모든 테스트를 실행할 거야.
  그래서 코드를 유저에게 publish(배포)하기 전에, 모든 API view에 대한 테스트 코드를 작성하고
  너가 놓친 에러들을 보여줄거야.

# 우리는 django REST framework에서 쓸 수 있는 test case class가 있다.
  from rest_framework.test import APITestCase
  APITestCase를 상속받는다.
  만약 django가 여러분의 코드를 테스트 해주길 바란다면
  그 테스트 코드는 'test_'로 시작하는 method 안에 작성되어야 한다.
  만약 test_로 시작하지 않으면, test를 실행해도 django는 그 test코드를 실행하지 않을거야.

# self.assertEqual() : 첫번째 argument와 두 번째 argument가 같은지를 확인할 거야.

# self.client는 API client를 말하는건데, API 서버로 request를 보낼 수 있게 해준다.
  URL을 쓰면 마치 브라우저에서 접근하는것 처럼 request를 전송한다.
  그리고 원한다면 self.client.login()을 할수도 있다.

# setUp method는 다른 모든 test들이 실행되기 전에 실행될것이다.
  바로 이 setUp이 데이터베이스를 설정(set up)할 수 있는 곳이지.